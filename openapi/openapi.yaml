{
    "openapi": "3.0.3",
    "info": {
        "title": "Peppol REST API",
        "description": "## Getting started\n\nManage and automate your documents within the Peppol Network with **A-Cube API** Peppol REST API.\n\n1. Get a valid token, see [here](#section/Authentication).\n2. Prepare and send a new document, you can chose between standard UBL 2.1 XML or the JSON format, see [here](#section/How-to-manage-Documents/Sending-a-document).\n3. Receive the identifier for the new created document as response and store it.\n4. Receive information about the delivery to your configured [webhook](#section/API-orchestration-and-webhooks), match against the previously stored identifier.\n\n## The Peppol Network\n\nPeppol (Pan-European Public Procurement OnLine) is an international exchange network where governments and organizations can exchange many types of documents in the [UBL format](https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=ubl).\n\nPeppol has been designed to be safe and reliable, the architecture behind is the eDelivery network. It is based on the 4 corners model\n\n<img src=\"data:image/png;base64, \" />\n\nSee the official documentation for more information [here](https://peppol.eu/what-is-peppol/peppol-transport-infrastructure/)\n\n## Environments\n\n- **sandbox** is the environment where you can test the entire platform without paying at any time. Documents are by the way exchanged through the Peppol test Network.\nThe base URL is https://peppol-sandbox.api.acubeapi.com\n- **production** is the environment where documents exchange happens in the official Peppol Network.\nThe base URL is https://peppol.api.acubeapi.com\n\nWe support the following TLS protocols: TLSv1.2 and TLSv1.3\n\n## Authentication\n\nTo obtain a JWT token send a `POST https://common.acubeapi.com/login`\n(or `POST https://common-sandbox.acubeapi.com/login` in case your working on the sandbox environment)\nspecifying the HTTP header `Content-Type: application/json` with the following payload\n\n```\n{\n    \"email\": \"your@email.com\",\n    \"password\": \"your password\"\n}\n```\n\nIf the login went fine you will receive a response with\n\n```\n{\n    \"token\": \"a very long encrypted token\"\n}\n```\n\nThe token you receive is a JWT token that lasts 24 hours.\n**You can ask a JWT token once every 24 hours**.\n\nThe token is composed by 3 parts, each part is delimited by a dot (`.`) char.\nExploding the token by `.` and doing a base64 decode of the second part you will obtain some useful informtion. Example\n\n```\n{\"iat\":<issue timestamp>,\"exp\":<expire timestamp>,\"roles\":[\"ROLE_WRITER\",\"ROLE_USER\"],\"username\":<your email>,\"uid\":<your identifier>}\n```\n\nTo use the token you must set it as Bearer into the **Authorization** header. Example:\n\n```\ncurl -X GET \\\n  https://peppol-sandbox.api.acubeapi.com/invoices \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer <here the received token>' \\\n```\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n## API orchestration and webhooks\n\nYou can configure via API your webhooks where to receive information in real-time, as soon as an event happens.\n\nA-Cube Peppol API supports two types of events:\n\n- `outgoing-document` it is dispatched to inform your webhook about an outgoing delivery\n- `incoming-document` it is dispatched when an incoming document has been delivered to your account\n\nYou will received a `HTTP POST` request to your configured URL with body\n\n```\n{\n    \"success\": bool,\n    \"document_id\": string - the document unique identifier,\n    \"document_type\": string - the document type code,\n    \"request_at\": datetime - when the request has been sent from corner 2,\n    \"response_at\": datetime - when the response has been sent from corner 3\n}\n```\n\nYou can find the list of document type codes we support [here](#section/How-to-manage-Documents/Resources).\n\n# How to manage Documents\n\n## Resources\n\nThere are different type of documents you can manage with A-Cube Peppol API:\n\n| UBL document type | Document type code |\n|-------------------|--------------------|\n| Invoice           | invoice            |\n| CreditNote        | credit-note        |\n| Order             | order              |\n| OrderResponse     | order-response     |\n| DespatchAdvice    | despatch-advice    |\n\nEach resource is made by:\n\n    - the document source (UBL 2.1 XML or the JSON transposition)\n    - the document metadata, information about the context and the document source\n\nYou can obtain a document **resource** with its getter operation. E.g. [`GET /invoices/{uuid}`](#operation/getInvoiceItem) or [`GET /orders/{uuid}`](#operation/getOrderItem)\n\nYou can obtain the original document **source** with the source getter operation. E.g. [`GET /invoices/{uuid}/source`](#operation/get_sourceInvoiceItem) or [`GET /orders/{uuid}/source`](#operation/get_sourceOrderItem)\n\n## Sending a document\n\nTo send a document you can choose to build a standard XML UBL 2.1 document or a JSON payload.\n\nIn both cases the endpoint is the POST method for that document type. E.g. [`POST /invoices/outgoing/ubl`](#operation/post_outgoing_ublInvoiceCollection) or [`POST /orders/outgoing/ubl`](#operation/post_outgoing_ublOrderCollection).\n\nIf the platform can not manage the document, you will get a response with a body describing the error in JSON and a status code:\n\n    - `HTTP 400` if validation will fail.\n    - `HTTP 500` in case of a general error server side.\n\nIf everything is fine and the validation passes you will receive an `HTTP 202` status and the document resource as the response. E.g. [Invoice response](#operation/post_ublInvoiceCollection) or [Order response](#operation/post_ublOrderCollection).\n\nThe document has been accepted and prepared for the dispatching through the Peppol network.\nWithin a short period of time it will be travelling towards the document recipient. Once  delivered you will get notified to your configured webhook.\n\n### The validation process\n\nThe validation is performed real-time during the API HTTP request.\n\nThe applied validation rule is chosen by default using the following information extracted from your document:\n\n- document type\n- customization ID\n- profile ID\n\nOptionally you can send the header `X-Validation-Rule: {validation-rule-code}` where `{validation-rule-code}` is one of the available validation rules.\nYou can obtain the list of available validation rules with this [API](#operation/getValidationRuleCollection)\n\n### XML UBL 2.1\n\nIn this case you must send the HTTP header `Content-Type: application/xml` and the request body must contains the raw XML.\n\nUBL (Universal Business Language) OASIS (ISO/IEC 19845) is an International Standard.\nUBL defines a royalty-free library of standard electronic XML business documents such as purchase orders and invoices.\n\nCheck out the official documentation to get more information about the structure http://docs.oasis-open.org/ubl/os-UBL-2.1/UBL-2.1.html#T-INVOICE\n\nInvoice Example:\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Invoice xmlns=\"urn:oasis:names:specification:ubl:schema:xsd:Invoice-2\"\n    xmlns:cac=\"urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2\"\n    xmlns:cbc=\"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2\">\n\n  <cbc:ID>123</cbc:ID>\n  <cbc:IssueDate>2011-09-22</cbc:IssueDate>\n\n  <cac:InvoicePeriod>\n    <cbc:StartDate>2011-08-01</cbc:StartDate>\n    <cbc:EndDate>2011-08-31</cbc:EndDate>\n  </cac:InvoicePeriod>\n\n  <cac:AccountingSupplierParty>\n    <cac:Party>\n      <cac:PartyName>\n        <cbc:Name>Custom Cotter Pins</cbc:Name>\n      </cac:PartyName>\n    </cac:Party>\n  </cac:AccountingSupplierParty>\n  <cac:AccountingCustomerParty>\n    <cac:Party>\n      <cac:PartyName>\n        <cbc:Name>North American Veeblefetzer</cbc:Name>\n      </cac:PartyName>\n    </cac:Party>\n  </cac:AccountingCustomerParty>\n\n  <cac:LegalMonetaryTotal>\n     <cbc:PayableAmount currencyID=\"CAD\">100.00</cbc:PayableAmount>\n  </cac:LegalMonetaryTotal>\n\n  <cac:InvoiceLine>\n    <cbc:ID>1</cbc:ID>\n    <cbc:LineExtensionAmount currencyID=\"CAD\">100.00</cbc:LineExtensionAmount>\n    <cac:Item>\n       <cbc:Description>Cotter pin, MIL-SPEC</cbc:Description>\n    </cac:Item>\n  </cac:InvoiceLine>\n\n</Invoice>\n```\n\n### JSON UBL 2.1\n\nIn case you do not want to manage the XML format, you can define documents in JSON.  In this case you must send the HTTP header `Content-Type: application/json`.\nThe structure and the naming is the same of the official XML, except for the case of XML attributes which is a concept that is not applicable to JSON documents.\nWe chosen to manage XML attributes within object structures in JSON, so to specify the node value we chosen to use a naming convention, the key is `__value`.\n\nSo if you have this tag with attribute in XML\n\n```\n<cbc:PayableAmount currencyID=\"CAD\">100.00</cbc:PayableAmount>\n```\n\nThe JSON translation is\n\n```\n\"PayableAmount\": {\n    \"__value\": 100.0,\n    \"currencyID\": \"CAD\"\n}\n```\n\n\nInvoice example:\n\n```\n{\n  \"ID\": {\n      \"__value\": \"123\"\n  },\n  \"IssueDate\": \"2011-09-22\",\n  \"InvoicePeriod\": [\n      {\n          \"StartDate\": \"2011-08-01\",\n          \"EndDate\": \"2011-08-31\"\n      }\n  ],\n  \"AccountingSupplierParty\": {\n      \"Party\": {\n          \"PartyName\": [\n              {\n                  \"Name\": {\n                      \"__value\": \"Custom Cotter Pins\"\n                  }\n              }\n          ]\n      }\n  },\n  \"AccountingCustomerParty\": {\n      \"Party\": {\n          \"PartyName\": [\n              {\n                  \"Name\": {\n                      \"__value\": \"North American Veeblefetzer\"\n                  }\n              }\n          ]\n      }\n  },\n  \"LegalMonetaryTotal\": {\n      \"PayableAmount\": {\n          \"__value\": 100.0,\n          \"currencyID\": \"CAD\"\n      }\n  },\n  \"InvoiceLine\": [\n      {\n          \"ID\": {\n              \"__value\": \"1\"\n          },\n          \"LineExtensionAmount\": {\n              \"__value\": 100.0,\n              \"currencyID\": \"CAD\"\n          },\n          \"Item\": {\n              \"Description\": [\n                  {\n                      \"__value\": \"Cotter pin, MIL-SPEC\"\n                  }\n              ]\n          }\n      }\n  ]\n}\n```\n\n## Searching for documents\n\nEvery managed document type has a GET endpoint to retrieve a filtered collection.\n\nYou can ask up to 30 documents per page and you can choose the number of items via the query parameter `itemsPerPage`.\nYou can switch page via the query parameter `page`.\n\nTo get information about the pagination you can send the HTTP header `application/ld+json`. You will receive an enriched payload containing the keys:\n\n- `hydra:member` - the array with the retrieved items\n- `hydra:totalItems` - total filtered items\n- `hydra:view`\n  - `hydra:first` - URL to the first page\n  - `hydra:last` - URL to the last page\n  - `hydra:next` - URL to the next page\n- `hydra:search` - object containing information about the filters\n\nSee [Hydra specifications](https://www.hydra-cg.com/spec/latest/core/) for more information.\n\nSee the documentation to retrieve the collection of a resource for reference.\ne.g. [Invoices collection](#operation/getInvoiceCollection) or [Orders collection](#operation/getOrderCollection)\n\n# How to manage legal entities\n\nA LegalEntity must be registered within our business registry in order to be a participant into the Peppol Network.\n\nYou can [create a LegalEntity via API](#operation/postLegalEntityCollection) by specifing some basic information:\n\n```\n{\n    \"registeredName\": \"ACME inc.\",\n    \"identifierScheme\": \"iso6523-actorid-upis\",\n    \"identifierValue\": \"9909:990399123MVA\"\n}\n```\n\nRefer to https://docs.peppol.eu/edelivery/codelists/ for a complete list of valid identifiers.\n\nYou will receive back a `UUID` that identifies the LegalEntity you created.\n\nYou can now enable the LegalEntity record into the SMP and register it into the Peppol Network with [PUT /legal-entities/{uuid}/smp](#operation/smp_writeLegalEntityItem).\nYou will need to provide information about the document types and processes this LegalEntity can manage:\n\n```\n{\n  \"enabled\": true,\n  \"capabilities\": [\n    {\n      \"documentTypeScheme\": \"busdox-docid-qns\",\n      \"documentType\": \"string\",\n      \"processScheme\": \"cenbii-procid-ubl\",\n      \"process\": \"string\"\n    }\n  ]\n}\n```\n\nYou can get a complete list of documents and processes supported by A-Cube Peppol API with [GET /document-types](#operation/getDocumentTypeCollection) and [GET /processes](#operation/getProcessCollection).\n\n## Supported processes\n\n| scheme | value | deprecated |\n| :--- | :--- | :--- |\n| cenbii-procid-ubl | urn:fdc:peppol.eu:2017:poacc:billing:01:1.0 | 0 |\n| cenbii-procid-ubl | urn:fdc:peppol.eu:poacc:bis:despatch\\_advice:3 | 0 |\n| cenbii-procid-ubl | urn:fdc:peppol.eu:poacc:bis:order\\_agreement:3 | 0 |\n| cenbii-procid-ubl | urn:fdc:peppol.eu:poacc:bis:order\\_only:3 | 0 |\n| cenbii-procid-ubl | urn:fdc:peppol.eu:poacc:bis:ordering:3 | 0 |\n\n## Supported document types\n\n| scheme | value | name | deprecated |\n| :--- | :--- | :--- | :--- |\n| busdox-docid-qns | urn:oasis:names:specification:ubl:schema:xsd:CreditNote-2::CreditNote##urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0::2.1 | PEPPOL BIS Billing UBL CreditNote V3 | 0 |\n| busdox-docid-qns | urn:oasis:names:specification:ubl:schema:xsd:DespatchAdvice-2::DespatchAdvice##urn:fdc:peppol.eu:poacc:trns:despatch\\_advice:3::2.1 | PEPPOL Despatch Advice transaction 3.0 | 0 |\n| busdox-docid-qns | urn:oasis:names:specification:ubl:schema:xsd:DespatchAdvice-2::DespatchAdvice##urn:fdc:peppol.eu:poacc:trns:despatch\\_advice:3:extended:urn:www.agid.gov.it:trns:ddt:3.1::2.1 | DespatchAdvice\\_IT | 0 |\n| busdox-docid-qns | urn:oasis:names:specification:ubl:schema:xsd:Invoice-2::Invoice##urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0::2.1 | PEPPOL BIS Billing UBL Invoice V3 | 0 |\n| busdox-docid-qns | urn:oasis:names:specification:ubl:schema:xsd:Order-2::Order##urn:fdc:peppol.eu:poacc:trns:order:3::2.1 | PEPPOL Order transaction 3.0 | 0 |\n| busdox-docid-qns | urn:oasis:names:specification:ubl:schema:xsd:Order-2::Order##urn:fdc:peppol.eu:poacc:trns:order:3:restrictive:urn:www.agid.gov.it:trns:ordine:3.1::2.1 | SimpleOrder\\_IT | 0 |\n| busdox-docid-qns | urn:oasis:names:specification:ubl:schema:xsd:OrderResponse-2::OrderResponse##urn:fdc:peppol.eu:poacc:trns:order\\_agreement:3::2.1 | PEPPOL Order Agreement transaction 3.0 | 0 |\n| busdox-docid-qns | urn:oasis:names:specification:ubl:schema:xsd:OrderResponse-2::OrderResponse##urn:fdc:peppol.eu:poacc:trns:order\\_response:3::2.1 | PEPPOL Order Response transaction 3.0 | 0 |\n| busdox-docid-qns | urn:oasis:names:specification:ubl:schema:xsd:OrderResponse-2::OrderResponse##urn:fdc:peppol.eu:poacc:trns:order\\_response:3:restrictive:urn:www.agid.gov.it:trns:risposta\\_ordine:3.0::2.1 | OrderResponse\\_IT | 0 |\n\n# Business Interoperability Specifications (BIS)\n\n> Peppol has developed the Business Interoperability Specifications (BIS) for common eProcurement processes to standardise electronic documents exchanged and validated through an open and secure network, between sending and receiving Access Points for public sector buyers and their suppliers across Europe and beyond.\n\nCit. https://peppol.eu/what-is-peppol/peppol-profiles-specifications/\n\nIf you manage a BIS that is not listed here, feel free to contact us at peppol@a-cube.io to explain your needs.\n\n## PEPPOL BIS Billing\n\nThis PEPPOL BIS provides a set of specifications for implementing a PEPPOL business process.\n\nYou can find the official documentation [here](https://docs.peppol.eu/poacc/billing/3.0/).\n\n## IT Orders - NSO\n\nItalian authority AgID released the Italian specification for the BIS 3 ordering processes.\nYou can find the official documentation [here](https://peppol-docs.agid.gov.it/docs/my_index-ENG.jsp).\n\nWith A-Cube Peppol API you can manage IT Orders the same way you manage Orders in the Peppol network, following the above mentioned rules.\n\nA-Cube platform will enrich the information collected within a field named `processInformation`.\n\nThe NSO Order resource will get the `processInformation` field as\n\n- `documentType` - string, enum: \"initial\" \"revocation\" \"replacement\" \"validation\" \"connected\" \"confirmation feedback\" \"denial feedback\" \"replacement feedback\"\n- `orderStatus` - string, enum: \"revised\" \"cancelled\" \"accepted by feedback order\" \"cancelled by feedback order\" \"revised by feedback order\" \"received by response\" \"accepted by response\" \"rejected by response\" \"accepted with updates by response\"\n- `documentReference` - the referenced Order document, if any\n\nSee [here](#operation/getITOrderItem) for the complete response model.\n\nThe NSO Order resource will get the `processInformation` field as\n\n- `documentType` - string, enum: \"order received\" \"order rejected\" \"order accepted\" \"order revised\"\n- `responseCode` - string, enum: \"AB\" \"RE\" \"AP\" \"CA\"\n- `orderResponseStatus` - string, enum: \"accepted\" \"revised\" \"cancelled\"\n\nSee [here](#operation/getITOrderResponseItem) for the complete response model.",
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "https://peppol-sandbox.api.acubeapi.com",
            "description": "A-Cube API Peppol sandbox environment"
        },
        {
            "url": "https://peppol.api.acubeapi.com",
            "description": "A-Cube API Peppol production environment"
        }
    ],
    "paths": {
        "/credit-notes": {
            "get": {
                "operationId": "getCreditNoteCollection",
                "tags": [
                    "CreditNote"
                ],
                "responses": {
                    "200": {
                        "description": "CreditNote collection",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "hydra:member": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CreditNote.CreditNoteOutput.jsonld"
                                            }
                                        },
                                        "hydra:totalItems": {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        "hydra:view": {
                                            "type": "object",
                                            "properties": {
                                                "@id": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:first": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:last": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:previous": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:next": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                }
                                            }
                                        },
                                        "hydra:search": {
                                            "type": "object",
                                            "properties": {
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:template": {
                                                    "type": "string"
                                                },
                                                "hydra:variableRepresentation": {
                                                    "type": "string"
                                                },
                                                "hydra:mapping": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "@type": {
                                                                "type": "string"
                                                            },
                                                            "variable": {
                                                                "type": "string"
                                                            },
                                                            "property": {
                                                                "type": "string",
                                                                "nullable": true
                                                            },
                                                            "required": {
                                                                "type": "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "required": [
                                        "hydra:member"
                                    ]
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CreditNote.CreditNoteOutput"
                                    }
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CreditNote.CreditNoteOutput"
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Retrieves the collection of CreditNote resources.",
                "description": "Retrieves the collection of CreditNote resources.",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The collection page number",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of items per page",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "minimum": 0
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[strictly_before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[strictly_after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter document creation date, it is mandatory to provide the direction filter too."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "description": "Filter document by direction, chose between \"outgoing\" or \"incoming\"",
                            "enum": [
                                "outgoing",
                                "incoming"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[strictly_before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[strictly_after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentNumber",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter document by documentNumber, it is mandatory to provide a documentDate filter too. Filter by ~documentNumber to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter by senderName. Use ~senderName to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderName[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "senderId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderId[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter by recipientName. Use ~recipientName to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientName[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientId[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[createdAt]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[documentDate]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[senderName]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[recipientName]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/credit-notes/incoming/ubl": {
            "post": {
                "operationId": "post_incoming_ublCreditNoteCollection",
                "tags": [
                    "CreditNote"
                ],
                "responses": {
                    "201": {
                        "description": "CreditNote resource created",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNote.CreditNoteOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNote.CreditNoteOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNote.CreditNoteOutput"
                                }
                            }
                        },
                        "links": {
                            "GetCreditNoteItem": {
                                "operationId": "getCreditNoteItem",
                                "parameters": {
                                    "uuid": "$response.body#/uuid"
                                },
                                "description": "The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /credit-notes/{uuid}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                },
                "summary": "Import a new incoming credit note in UBL format",
                "description": "Import a received UBL 2.1 credit note in either the original XML format or the JSON transposition.\nYou must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).",
                "parameters": [],
                "requestBody": {
                    "description": "The new CreditNote resource",
                    "content": {
                        "application/json": {
                            "schema": {}
                        },
                        "application/xml": {
                            "schema": {}
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "parameters": []
        },
        "/credit-notes/outgoing/ubl": {
            "post": {
                "operationId": "post_outgoing_ublCreditNoteCollection",
                "tags": [
                    "CreditNote"
                ],
                "responses": {
                    "201": {
                        "description": "CreditNote resource created",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNote.CreditNoteOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNote.CreditNoteOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNote.CreditNoteOutput"
                                }
                            }
                        },
                        "links": {
                            "GetCreditNoteItem": {
                                "operationId": "getCreditNoteItem",
                                "parameters": {
                                    "uuid": "$response.body#/uuid"
                                },
                                "description": "The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /credit-notes/{uuid}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                },
                "summary": "Create a new credit note in UBL format",
                "description": "Send a UBL 2.1 credit note in either the original XML format or the JSON transposition.\nYou must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).\n\nOptionally you can send the `X-Validation-Rule: {validation-rule-code}` where `{validation-rule-code}` is one of the available validation rules you can use.\nYou can retrieve a list of the available validation rules using the API `GET /validation-rules`.\nBy default the validation rule is autodetected using the latest rule available for the given document.\n",
                "parameters": [],
                "requestBody": {
                    "description": "The new CreditNote resource",
                    "content": {
                        "application/json": {
                            "schema": {}
                        },
                        "application/xml": {
                            "schema": {}
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "parameters": []
        },
        "/credit-notes/{uuid}": {
            "get": {
                "operationId": "getCreditNoteItem",
                "tags": [
                    "CreditNote"
                ],
                "responses": {
                    "200": {
                        "description": "CreditNote resource",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNote.CreditNoteOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNote.CreditNoteOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNote.CreditNoteOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Retrieves a CreditNote resource.",
                "description": "Retrieves a CreditNote resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/credit-notes/{uuid}/print": {
            "get": {
                "operationId": "printCreditNoteItem",
                "tags": [
                    "CreditNote"
                ],
                "responses": {
                    "200": {
                        "description": "CreditNote resource",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNote.PrintDocumentOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNote.PrintDocumentOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Get the printed version of the document",
                "description": "If you specify header Accept equal to 'application/pdf' or 'text/html' you will receive a 302 redirect response with the Location header pointing to the downloadable file. Additionally you get the URL to the downloaded file in the JSON response body.\n\nIf you specify header Accept equal to 'application/json' you will receive 200 status code and the JSON response containing the URL to follow manually.\n\nYou can avoid the 302 redirect response by sending header `X-WithRedirect: false`\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/credit-notes/{uuid}/source": {
            "get": {
                "operationId": "get_sourceCreditNoteItem",
                "tags": [
                    "CreditNote"
                ],
                "responses": {
                    "200": {
                        "description": "CreditNote resource",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNote.CreditNoteOutput"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNote.CreditNoteOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Get the original source document",
                "description": "Retrieves a CreditNote resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/despatch-advices": {
            "get": {
                "operationId": "getDespatchAdviceCollection",
                "tags": [
                    "DespatchAdvice"
                ],
                "responses": {
                    "200": {
                        "description": "DespatchAdvice collection",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "hydra:member": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DespatchAdvice.DespatchAdviceOutput.jsonld"
                                            }
                                        },
                                        "hydra:totalItems": {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        "hydra:view": {
                                            "type": "object",
                                            "properties": {
                                                "@id": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:first": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:last": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:previous": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:next": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                }
                                            }
                                        },
                                        "hydra:search": {
                                            "type": "object",
                                            "properties": {
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:template": {
                                                    "type": "string"
                                                },
                                                "hydra:variableRepresentation": {
                                                    "type": "string"
                                                },
                                                "hydra:mapping": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "@type": {
                                                                "type": "string"
                                                            },
                                                            "variable": {
                                                                "type": "string"
                                                            },
                                                            "property": {
                                                                "type": "string",
                                                                "nullable": true
                                                            },
                                                            "required": {
                                                                "type": "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "required": [
                                        "hydra:member"
                                    ]
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DespatchAdvice.DespatchAdviceOutput"
                                    }
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DespatchAdvice.DespatchAdviceOutput"
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Retrieves the collection of DespatchAdvice resources.",
                "description": "Retrieves the collection of DespatchAdvice resources.",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The collection page number",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of items per page",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "minimum": 0
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[strictly_before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[strictly_after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter document creation date, it is mandatory to provide the direction filter too."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "description": "Filter document by direction, chose between \"outgoing\" or \"incoming\"",
                            "enum": [
                                "outgoing",
                                "incoming"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[strictly_before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[strictly_after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentNumber",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter document by documentNumber, it is mandatory to provide a documentDate filter too. Filter by ~documentNumber to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter by senderName. Use ~senderName to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderName[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "senderId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderId[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter by recipientName. Use ~recipientName to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientName[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientId[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[createdAt]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[documentDate]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[senderName]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[recipientName]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/despatch-advices/incoming/ubl": {
            "post": {
                "operationId": "post_incoming_ublDespatchAdviceCollection",
                "tags": [
                    "DespatchAdvice"
                ],
                "responses": {
                    "201": {
                        "description": "DespatchAdvice resource created",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DespatchAdvice.DespatchAdviceOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DespatchAdvice.DespatchAdviceOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/DespatchAdvice.DespatchAdviceOutput"
                                }
                            }
                        },
                        "links": {
                            "GetDespatchAdviceItem": {
                                "operationId": "getDespatchAdviceItem",
                                "parameters": {
                                    "uuid": "$response.body#/uuid"
                                },
                                "description": "The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /despatch-advices/{uuid}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                },
                "summary": "Import a new incoming despatch advice in UBL format",
                "description": "Import a received UBL 2.1 despatch advices in either the original XML format or the JSON transposition.\nYou must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).",
                "parameters": [],
                "requestBody": {
                    "description": "The new DespatchAdvice resource",
                    "content": {
                        "application/json": {
                            "schema": {}
                        },
                        "application/xml": {
                            "schema": {}
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "parameters": []
        },
        "/despatch-advices/outgoing/ubl": {
            "post": {
                "operationId": "post_outgoing_ublDespatchAdviceCollection",
                "tags": [
                    "DespatchAdvice"
                ],
                "responses": {
                    "201": {
                        "description": "DespatchAdvice resource created",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DespatchAdvice.DespatchAdviceOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DespatchAdvice.DespatchAdviceOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/DespatchAdvice.DespatchAdviceOutput"
                                }
                            }
                        },
                        "links": {
                            "GetDespatchAdviceItem": {
                                "operationId": "getDespatchAdviceItem",
                                "parameters": {
                                    "uuid": "$response.body#/uuid"
                                },
                                "description": "The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /despatch-advices/{uuid}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                },
                "summary": "Create a new despatch advice in UBL format",
                "description": "Send a UBL 2.1 despatch advices in either the original XML format or the JSON transposition.\nYou must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).\n\nOptionally you can send the `X-Validation-Rule: {validation-rule-code}` where `{validation-rule-code}` is one of the available validation rules you can use.\nYou can retrieve a list of the available validation rules using the API `GET /validation-rules`.\nBy default the validation rule is autodetected using the latest rule available for the given document.\n",
                "parameters": [],
                "requestBody": {
                    "description": "The new DespatchAdvice resource",
                    "content": {
                        "application/json": {
                            "schema": {}
                        },
                        "application/xml": {
                            "schema": {}
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "parameters": []
        },
        "/despatch-advices/{uuid}": {
            "get": {
                "operationId": "getDespatchAdviceItem",
                "tags": [
                    "DespatchAdvice"
                ],
                "responses": {
                    "200": {
                        "description": "DespatchAdvice resource",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DespatchAdvice.DespatchAdviceOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DespatchAdvice.DespatchAdviceOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/DespatchAdvice.DespatchAdviceOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Retrieves a DespatchAdvice resource.",
                "description": "Retrieves a DespatchAdvice resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/despatch-advices/{uuid}/source": {
            "get": {
                "operationId": "get_sourceDespatchAdviceItem",
                "tags": [
                    "DespatchAdvice"
                ],
                "responses": {
                    "200": {
                        "description": "DespatchAdvice resource",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/DespatchAdvice.DespatchAdviceOutput"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DespatchAdvice.DespatchAdviceOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Get the original source document",
                "description": "Retrieves a DespatchAdvice resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/document-types": {
            "get": {
                "operationId": "getDocumentTypeCollection",
                "tags": [
                    "DocumentType"
                ],
                "responses": {
                    "200": {
                        "description": "DocumentType collection",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "hydra:member": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DocumentType.DocumentTypeOutput.jsonld"
                                            }
                                        },
                                        "hydra:totalItems": {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        "hydra:view": {
                                            "type": "object",
                                            "properties": {
                                                "@id": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:first": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:last": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:previous": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:next": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                }
                                            }
                                        },
                                        "hydra:search": {
                                            "type": "object",
                                            "properties": {
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:template": {
                                                    "type": "string"
                                                },
                                                "hydra:variableRepresentation": {
                                                    "type": "string"
                                                },
                                                "hydra:mapping": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "@type": {
                                                                "type": "string"
                                                            },
                                                            "variable": {
                                                                "type": "string"
                                                            },
                                                            "property": {
                                                                "type": "string",
                                                                "nullable": true
                                                            },
                                                            "required": {
                                                                "type": "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "required": [
                                        "hydra:member"
                                    ]
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DocumentType.DocumentTypeOutput"
                                    }
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DocumentType.DocumentTypeOutput"
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Retrieves the collection of DocumentType resources.",
                "description": "Get the list of supported document types.\nFor a complete and official list see https://docs.peppol.eu/edelivery/codelists/\n",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The collection page number",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of items per page",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "minimum": 0
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/i-t-order-a-c-ls/{id}": {
            "get": {
                "operationId": "getITOrderACLItem",
                "tags": [
                    "ITOrderACL"
                ],
                "responses": {
                    "204": {
                        "description": "ITOrderACL resource",
                        "content": {
                            "application/ld+json": {
                                "schema": {}
                            },
                            "application/json": {
                                "schema": {}
                            },
                            "text/html": {
                                "schema": {}
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Retrieves a ITOrderACL resource.",
                "description": "Retrieves a ITOrderACL resource.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/internal/it/orders/acl": {
            "post": {
                "operationId": "postITOrderACLCollection",
                "tags": [
                    "ITOrderACL"
                ],
                "responses": {
                    "201": {
                        "description": "ITOrderACL resource created",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrderACL.ITOrderACLOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrderACL.ITOrderACLOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrderACL.ITOrderACLOutput"
                                }
                            }
                        },
                        "links": {
                            "GetITOrderACLItem": {
                                "operationId": "getITOrderACLItem",
                                "parameters": {
                                    "userId": "$response.body#/userId",
                                    "document": "$response.body#/document"
                                },
                                "description": "The values returned in the response can be used in `GET /i-t-order-a-c-ls/{id}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                },
                "summary": "Creates a ITOrderACL resource.",
                "description": "Creates a ITOrderACL resource.",
                "parameters": [],
                "requestBody": {
                    "description": "The new ITOrderACL resource",
                    "content": {
                        "application/ld+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ITOrderACL.ITOrderACLInput.jsonld"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ITOrderACL.ITOrderACLInput"
                            }
                        },
                        "text/html": {
                            "schema": {
                                "$ref": "#/components/schemas/ITOrderACL.ITOrderACLInput"
                            }
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "parameters": []
        },
        "/invoices": {
            "get": {
                "operationId": "getInvoiceCollection",
                "tags": [
                    "Invoice"
                ],
                "responses": {
                    "200": {
                        "description": "Invoice collection",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "hydra:member": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Invoice.InvoiceOutput.jsonld"
                                            }
                                        },
                                        "hydra:totalItems": {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        "hydra:view": {
                                            "type": "object",
                                            "properties": {
                                                "@id": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:first": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:last": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:previous": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:next": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                }
                                            }
                                        },
                                        "hydra:search": {
                                            "type": "object",
                                            "properties": {
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:template": {
                                                    "type": "string"
                                                },
                                                "hydra:variableRepresentation": {
                                                    "type": "string"
                                                },
                                                "hydra:mapping": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "@type": {
                                                                "type": "string"
                                                            },
                                                            "variable": {
                                                                "type": "string"
                                                            },
                                                            "property": {
                                                                "type": "string",
                                                                "nullable": true
                                                            },
                                                            "required": {
                                                                "type": "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "required": [
                                        "hydra:member"
                                    ]
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Invoice.InvoiceOutput"
                                    }
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Invoice.InvoiceOutput"
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Retrieves the collection of Invoice resources.",
                "description": "Retrieves the collection of Invoice resources.",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The collection page number",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of items per page",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "minimum": 0
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[strictly_before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[strictly_after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter document creation date, it is mandatory to provide the direction filter too."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "description": "Filter document by direction, chose between \"outgoing\" or \"incoming\"",
                            "enum": [
                                "outgoing",
                                "incoming"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[strictly_before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[strictly_after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentNumber",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter document by documentNumber, it is mandatory to provide a documentDate filter too. Filter by ~documentNumber to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter by senderName. Use ~senderName to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderName[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "senderId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderId[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter by recipientName. Use ~recipientName to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientName[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientId[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[createdAt]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[documentDate]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[senderName]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[recipientName]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/invoices/incoming/ubl": {
            "post": {
                "operationId": "post_incoming_ublInvoiceCollection",
                "tags": [
                    "Invoice"
                ],
                "responses": {
                    "201": {
                        "description": "Invoice resource created",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice.InvoiceOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice.InvoiceOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice.InvoiceOutput"
                                }
                            }
                        },
                        "links": {
                            "GetInvoiceItem": {
                                "operationId": "getInvoiceItem",
                                "parameters": {
                                    "uuid": "$response.body#/uuid"
                                },
                                "description": "The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /invoices/{uuid}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                },
                "summary": "Import a new incoming invoice in UBL format",
                "description": "Import a received UBL 2.1 invoice in either the original XML format or the JSON transposition.\nYou must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).",
                "parameters": [],
                "requestBody": {
                    "description": "The new Invoice resource",
                    "content": {
                        "application/json": {
                            "schema": {}
                        },
                        "application/xml": {
                            "schema": {}
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "parameters": []
        },
        "/invoices/outgoing/ubl": {
            "post": {
                "operationId": "post_outgoing_ublInvoiceCollection",
                "tags": [
                    "Invoice"
                ],
                "responses": {
                    "201": {
                        "description": "Invoice resource created",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice.InvoiceOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice.InvoiceOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice.InvoiceOutput"
                                }
                            }
                        },
                        "links": {
                            "GetInvoiceItem": {
                                "operationId": "getInvoiceItem",
                                "parameters": {
                                    "uuid": "$response.body#/uuid"
                                },
                                "description": "The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /invoices/{uuid}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                },
                "summary": "Create a new invoice in UBL format",
                "description": "Send a UBL 2.1 invoice in either the original XML format or the JSON transposition.\nYou must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).\n\nOptionally you can send the `X-Validation-Rule: {validation-rule-code}` where `{validation-rule-code}` is one of the available validation rules you can use.\nYou can retrieve a list of the available validation rules using the API `GET /validation-rules`.\nBy default the validation rule is autodetected using the latest rule available for the given document.\n\nSee <a href='#section/How-to-manage-Invoices/Sending-an-invoice'>here</a> for more information about UBL\n",
                "parameters": [],
                "requestBody": {
                    "description": "The new Invoice resource",
                    "content": {
                        "application/json": {
                            "schema": {}
                        },
                        "application/xml": {
                            "schema": {}
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "parameters": []
        },
        "/invoices/{uuid}": {
            "get": {
                "operationId": "getInvoiceItem",
                "tags": [
                    "Invoice"
                ],
                "responses": {
                    "200": {
                        "description": "Invoice resource",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice.InvoiceOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice.InvoiceOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice.InvoiceOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Retrieves a Invoice resource.",
                "description": "Retrieves a Invoice resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/invoices/{uuid}/print": {
            "get": {
                "operationId": "printInvoiceItem",
                "tags": [
                    "Invoice"
                ],
                "responses": {
                    "200": {
                        "description": "Invoice resource",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice.PrintDocumentOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice.PrintDocumentOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Get the printed version of the document",
                "description": "If you specify header Accept equal to 'application/pdf' or 'text/html' you will receive a 302 redirect response with the Location header pointing to the downloadable file. Additionally you get the URL to the downloaded file in the JSON response body.\n\nIf you specify header Accept equal to 'application/json' you will receive 200 status code and the JSON response containing the URL to follow manually.\n\nYou can avoid the 302 redirect response by sending header `X-WithRedirect: false`\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/invoices/{uuid}/source": {
            "get": {
                "operationId": "get_sourceInvoiceItem",
                "tags": [
                    "Invoice"
                ],
                "responses": {
                    "200": {
                        "description": "Invoice resource",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice.InvoiceOutput"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice.InvoiceOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Get the original source document",
                "description": "Retrieves a Invoice resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/it/order-responses": {
            "get": {
                "operationId": "getITOrderResponseCollection",
                "tags": [
                    "ITOrderResponse"
                ],
                "responses": {
                    "200": {
                        "description": "ITOrderResponse collection",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "hydra:member": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ITOrderResponse.ITOrderResponseOutput.jsonld"
                                            }
                                        },
                                        "hydra:totalItems": {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        "hydra:view": {
                                            "type": "object",
                                            "properties": {
                                                "@id": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:first": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:last": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:previous": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:next": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                }
                                            }
                                        },
                                        "hydra:search": {
                                            "type": "object",
                                            "properties": {
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:template": {
                                                    "type": "string"
                                                },
                                                "hydra:variableRepresentation": {
                                                    "type": "string"
                                                },
                                                "hydra:mapping": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "@type": {
                                                                "type": "string"
                                                            },
                                                            "variable": {
                                                                "type": "string"
                                                            },
                                                            "property": {
                                                                "type": "string",
                                                                "nullable": true
                                                            },
                                                            "required": {
                                                                "type": "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "required": [
                                        "hydra:member"
                                    ]
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ITOrderResponse.ITOrderResponseOutput"
                                    }
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ITOrderResponse.ITOrderResponseOutput"
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Retrieves the collection of ITOrderResponse resources.",
                "description": "Retrieves the collection of ITOrderResponse resources.",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The collection page number",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of items per page",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "minimum": 0
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[strictly_before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[strictly_after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter document creation date, it is mandatory to provide the direction filter too."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "description": "Filter document by direction, chose between \"outgoing\" or \"incoming\"",
                            "enum": [
                                "outgoing",
                                "incoming"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[strictly_before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[strictly_after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentNumber",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter document by documentNumber, it is mandatory to provide a documentDate filter too. Filter by ~documentNumber to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter by senderName. Use ~senderName to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderName[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "senderId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderId[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter by recipientName. Use ~recipientName to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientName[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientId[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[createdAt]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[documentDate]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[senderName]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[recipientName]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/it/order-responses/incoming/ubl": {
            "post": {
                "operationId": "post_incoming_ublITOrderResponseCollection",
                "tags": [
                    "ITOrderResponse"
                ],
                "responses": {
                    "201": {
                        "description": "ITOrderResponse resource created",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrderResponse.ITOrderResponseOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrderResponse.ITOrderResponseOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrderResponse.ITOrderResponseOutput"
                                }
                            }
                        },
                        "links": {
                            "GetITOrderResponseItem": {
                                "operationId": "getITOrderResponseItem",
                                "parameters": {
                                    "uuid": "$response.body#/uuid"
                                },
                                "description": "The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /it/order-responses/{uuid}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                },
                "summary": "Import a new incoming NSO order response in UBL format",
                "description": "Import a received NSO order response in either the original XML format or the JSON transposition.\nYou must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).",
                "parameters": [],
                "requestBody": {
                    "description": "The new ITOrderResponse resource",
                    "content": {
                        "application/json": {
                            "schema": {}
                        },
                        "application/xml": {
                            "schema": {}
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "parameters": []
        },
        "/it/order-responses/outgoing/ubl": {
            "post": {
                "operationId": "post_outgoing_ublITOrderResponseCollection",
                "tags": [
                    "ITOrderResponse"
                ],
                "responses": {
                    "201": {
                        "description": "ITOrderResponse resource created",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrderResponse.ITOrderResponseOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrderResponse.ITOrderResponseOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrderResponse.ITOrderResponseOutput"
                                }
                            }
                        },
                        "links": {
                            "GetITOrderResponseItem": {
                                "operationId": "getITOrderResponseItem",
                                "parameters": {
                                    "uuid": "$response.body#/uuid"
                                },
                                "description": "The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /it/order-responses/{uuid}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                },
                "summary": "Create a new NSO order response in UBL format",
                "description": "Send a NSO order response in either the original XML format or the JSON transposition.\nYou must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).\n\nOptionally you can send the `X-Validation-Rule: {validation-rule-code}` where `{validation-rule-code}` is one of the available validation rules you can use.\nYou can retrieve a list of the available validation rules using the API `GET /validation-rules`.\nBy default the validation rule is autodetected using the latest rule available for the given document.\n",
                "parameters": [],
                "requestBody": {
                    "description": "The new ITOrderResponse resource",
                    "content": {
                        "application/json": {
                            "schema": {}
                        },
                        "application/xml": {
                            "schema": {}
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "parameters": []
        },
        "/it/order-responses/{uuid}": {
            "get": {
                "operationId": "getITOrderResponseItem",
                "tags": [
                    "ITOrderResponse"
                ],
                "responses": {
                    "200": {
                        "description": "ITOrderResponse resource",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrderResponse.ITOrderResponseOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrderResponse.ITOrderResponseOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrderResponse.ITOrderResponseOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Retrieves a ITOrderResponse resource.",
                "description": "Retrieves a ITOrderResponse resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/it/order-responses/{uuid}/print": {
            "get": {
                "operationId": "printITOrderResponseItem",
                "tags": [
                    "ITOrderResponse"
                ],
                "responses": {
                    "200": {
                        "description": "ITOrderResponse resource",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrderResponse.PrintDocumentOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrderResponse.PrintDocumentOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Get the printed version of the document",
                "description": "If you specify header Accept equal to 'application/pdf' or 'text/html' you will receive a 302 redirect response with the Location header pointing to the downloadable file. Additionally you get the URL to the downloaded file in the JSON response body.\n\nIf you specify header Accept equal to 'application/json' you will receive 200 status code and the JSON response containing the URL to follow manually.\n\nYou can avoid the 302 redirect response by sending header `X-WithRedirect: false`\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/it/order-responses/{uuid}/source": {
            "get": {
                "operationId": "get_sourceITOrderResponseItem",
                "tags": [
                    "ITOrderResponse"
                ],
                "responses": {
                    "200": {
                        "description": "ITOrderResponse resource",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrderResponse.ITOrderResponseOutput"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrderResponse.ITOrderResponseOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Get the original source document",
                "description": "Retrieves a ITOrderResponse resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/it/orders": {
            "get": {
                "operationId": "getITOrderCollection",
                "tags": [
                    "ITOrder"
                ],
                "responses": {
                    "200": {
                        "description": "ITOrder collection",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "hydra:member": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ITOrder.ITOrderOutput.jsonld"
                                            }
                                        },
                                        "hydra:totalItems": {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        "hydra:view": {
                                            "type": "object",
                                            "properties": {
                                                "@id": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:first": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:last": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:previous": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:next": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                }
                                            }
                                        },
                                        "hydra:search": {
                                            "type": "object",
                                            "properties": {
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:template": {
                                                    "type": "string"
                                                },
                                                "hydra:variableRepresentation": {
                                                    "type": "string"
                                                },
                                                "hydra:mapping": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "@type": {
                                                                "type": "string"
                                                            },
                                                            "variable": {
                                                                "type": "string"
                                                            },
                                                            "property": {
                                                                "type": "string",
                                                                "nullable": true
                                                            },
                                                            "required": {
                                                                "type": "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "required": [
                                        "hydra:member"
                                    ]
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ITOrder.ITOrderOutput"
                                    }
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ITOrder.ITOrderOutput"
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Retrieves the collection of ITOrder resources.",
                "description": "Retrieves the collection of ITOrder resources.",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The collection page number",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of items per page",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "minimum": 0
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[strictly_before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[strictly_after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter document creation date, it is mandatory to provide the direction filter too."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "description": "Filter document by direction, chose between \"outgoing\" or \"incoming\"",
                            "enum": [
                                "outgoing",
                                "incoming"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[strictly_before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[strictly_after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentNumber",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter document by documentNumber, it is mandatory to provide a documentDate filter too. Filter by ~documentNumber to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter by senderName. Use ~senderName to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderName[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "senderId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderId[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter by recipientName. Use ~recipientName to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientName[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientId[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[createdAt]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[documentDate]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[senderName]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[recipientName]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/it/orders/incoming/ubl": {
            "post": {
                "operationId": "post_incoming_ublITOrderCollection",
                "tags": [
                    "ITOrder"
                ],
                "responses": {
                    "201": {
                        "description": "ITOrder resource created",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrder.ITOrderOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrder.ITOrderOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrder.ITOrderOutput"
                                }
                            }
                        },
                        "links": {
                            "GetITOrderItem": {
                                "operationId": "getITOrderItem",
                                "parameters": {
                                    "uuid": "$response.body#/uuid"
                                },
                                "description": "The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /it/orders/{uuid}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                },
                "summary": "Import a new incoming NSO order in UBL format",
                "description": "Import a received NSO order in either the original XML format or the JSON transposition.\nYou must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).",
                "parameters": [],
                "requestBody": {
                    "description": "The new ITOrder resource",
                    "content": {
                        "application/json": {
                            "schema": {}
                        },
                        "application/xml": {
                            "schema": {}
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "parameters": []
        },
        "/it/orders/outgoing/ubl": {
            "post": {
                "operationId": "post_outgoing_ublITOrderCollection",
                "tags": [
                    "ITOrder"
                ],
                "responses": {
                    "201": {
                        "description": "ITOrder resource created",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrder.ITOrderOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrder.ITOrderOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrder.ITOrderOutput"
                                }
                            }
                        },
                        "links": {
                            "GetITOrderItem": {
                                "operationId": "getITOrderItem",
                                "parameters": {
                                    "uuid": "$response.body#/uuid"
                                },
                                "description": "The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /it/orders/{uuid}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                },
                "summary": "Create a new NSO order in UBL format",
                "description": "Send a NSO order in either the original XML format or the JSON transposition.\nYou must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).\n\nOptionally you can send the `X-Validation-Rule: {validation-rule-code}` where `{validation-rule-code}` is one of the available validation rules you can use.\nYou can retrieve a list of the available validation rules using the API `GET /validation-rules`.\nBy default the validation rule is autodetected using the latest rule available for the given document.\n",
                "parameters": [],
                "requestBody": {
                    "description": "The new ITOrder resource",
                    "content": {
                        "application/json": {
                            "schema": {}
                        },
                        "application/xml": {
                            "schema": {}
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "parameters": []
        },
        "/it/orders/{uuid}": {
            "get": {
                "operationId": "getITOrderItem",
                "tags": [
                    "ITOrder"
                ],
                "responses": {
                    "200": {
                        "description": "ITOrder resource",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrder.ITOrderOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrder.ITOrderOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrder.ITOrderOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Retrieves a ITOrder resource.",
                "description": "Retrieves a ITOrder resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/it/orders/{uuid}/print": {
            "get": {
                "operationId": "printITOrderItem",
                "tags": [
                    "ITOrder"
                ],
                "responses": {
                    "200": {
                        "description": "ITOrder resource",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrder.PrintDocumentOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrder.PrintDocumentOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Get the printed version of the document",
                "description": "You will receive a 302 redirect response with the Location header pointing to the downloadable file. Additionally you get the URL to the downloaded file in the JSON response body.\n\nYou can ask for the HTML or the PDF version of the printed document by sending header `Accept: text/html` or `Accept: application/pdf`.\n\nYou can avoid the 302 redirect response by sending header `X-WithRedirect: false`\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/it/orders/{uuid}/source": {
            "get": {
                "operationId": "get_sourceITOrderItem",
                "tags": [
                    "ITOrder"
                ],
                "responses": {
                    "200": {
                        "description": "ITOrder resource",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrder.ITOrderOutput"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITOrder.ITOrderOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Get the original source document",
                "description": "Retrieves a ITOrder resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/legal-entities": {
            "get": {
                "operationId": "getLegalEntityCollection",
                "tags": [
                    "LegalEntity"
                ],
                "responses": {
                    "200": {
                        "description": "LegalEntity collection",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "hydra:member": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LegalEntity.LegalEntityOutput.jsonld"
                                            }
                                        },
                                        "hydra:totalItems": {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        "hydra:view": {
                                            "type": "object",
                                            "properties": {
                                                "@id": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:first": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:last": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:previous": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:next": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                }
                                            }
                                        },
                                        "hydra:search": {
                                            "type": "object",
                                            "properties": {
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:template": {
                                                    "type": "string"
                                                },
                                                "hydra:variableRepresentation": {
                                                    "type": "string"
                                                },
                                                "hydra:mapping": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "@type": {
                                                                "type": "string"
                                                            },
                                                            "variable": {
                                                                "type": "string"
                                                            },
                                                            "property": {
                                                                "type": "string",
                                                                "nullable": true
                                                            },
                                                            "required": {
                                                                "type": "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "required": [
                                        "hydra:member"
                                    ]
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity.LegalEntityOutput"
                                    }
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity.LegalEntityOutput"
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Retrieves the collection of LegalEntity resources.",
                "description": "Retrieves the collection of LegalEntity resources.",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The collection page number",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of items per page",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "minimum": 0
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "identifierValue",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "identifierValue[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "registeredName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter by registeredName. Use ~registeredName to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "registeredName[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[createdAt]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[registeredName]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[identifierScheme]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[identifierValue]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "post": {
                "operationId": "postLegalEntityCollection",
                "tags": [
                    "LegalEntity"
                ],
                "responses": {
                    "201": {
                        "description": "LegalEntity resource created",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LegalEntity.LegalEntityOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LegalEntity.LegalEntityOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/LegalEntity.LegalEntityOutput"
                                }
                            }
                        },
                        "links": {
                            "GetLegalEntityItem": {
                                "operationId": "getLegalEntityItem",
                                "parameters": {
                                    "uuid": "$response.body#/uuid"
                                },
                                "description": "The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /legal-entities/{uuid}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                },
                "summary": "Creates a LegalEntity resource.",
                "description": "Creates a LegalEntity resource.",
                "parameters": [],
                "requestBody": {
                    "description": "The new LegalEntity resource",
                    "content": {
                        "application/ld+json": {
                            "schema": {
                                "$ref": "#/components/schemas/LegalEntity.LegalEntityInput.jsonld"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LegalEntity.LegalEntityInput"
                            }
                        },
                        "text/html": {
                            "schema": {
                                "$ref": "#/components/schemas/LegalEntity.LegalEntityInput"
                            }
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "parameters": []
        },
        "/legal-entities/{uuid}": {
            "get": {
                "operationId": "getLegalEntityItem",
                "tags": [
                    "LegalEntity"
                ],
                "responses": {
                    "200": {
                        "description": "LegalEntity resource",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LegalEntity.LegalEntityOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LegalEntity.LegalEntityOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/LegalEntity.LegalEntityOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Retrieves a LegalEntity resource.",
                "description": "Retrieves a LegalEntity resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "put": {
                "operationId": "putLegalEntityItem",
                "tags": [
                    "LegalEntity"
                ],
                "responses": {
                    "200": {
                        "description": "LegalEntity resource updated",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LegalEntity.LegalEntityOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LegalEntity.LegalEntityOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/LegalEntity.LegalEntityOutput"
                                }
                            }
                        },
                        "links": {
                            "GetLegalEntityItem": {
                                "operationId": "getLegalEntityItem",
                                "parameters": {
                                    "uuid": "$response.body#/uuid"
                                },
                                "description": "The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /legal-entities/{uuid}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Replaces the LegalEntity resource.",
                "description": "Replaces the LegalEntity resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "requestBody": {
                    "description": "The updated LegalEntity resource",
                    "content": {
                        "application/ld+json": {
                            "schema": {
                                "$ref": "#/components/schemas/LegalEntity.jsonld"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LegalEntity"
                            }
                        },
                        "text/html": {
                            "schema": {
                                "$ref": "#/components/schemas/LegalEntity"
                            }
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "delete": {
                "operationId": "deleteLegalEntityItem",
                "tags": [
                    "LegalEntity"
                ],
                "responses": {
                    "204": {
                        "description": "LegalEntity resource deleted"
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Removes the LegalEntity resource.",
                "description": "Removes the LegalEntity resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/legal-entities/{uuid}/smp": {
            "get": {
                "operationId": "smp_readLegalEntityItem",
                "tags": [
                    "LegalEntity"
                ],
                "responses": {
                    "200": {
                        "description": "LegalEntity resource",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LegalEntity.LegalEntitySMPOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LegalEntity.LegalEntitySMPOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/LegalEntity.LegalEntitySMPOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Read the SMP records for the LegalEntity resource",
                "description": "Retrieves a LegalEntity resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "put": {
                "operationId": "smp_writeLegalEntityItem",
                "tags": [
                    "LegalEntity"
                ],
                "responses": {
                    "200": {
                        "description": "LegalEntity resource updated",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LegalEntity.LegalEntitySMPOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LegalEntity.LegalEntitySMPOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/LegalEntity.LegalEntitySMPOutput"
                                }
                            }
                        },
                        "links": {
                            "GetLegalEntityItem": {
                                "operationId": "getLegalEntityItem",
                                "parameters": {
                                    "uuid": "$response.body#/uuid"
                                },
                                "description": "The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /legal-entities/{uuid}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Manage the SMP records for the LegalEntity resource",
                "description": "Replaces the LegalEntity resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "requestBody": {
                    "description": "The updated LegalEntity resource",
                    "content": {
                        "application/ld+json": {
                            "schema": {
                                "$ref": "#/components/schemas/LegalEntity.LegalEntitySMPInput.jsonld"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LegalEntity.LegalEntitySMPInput"
                            }
                        },
                        "text/html": {
                            "schema": {
                                "$ref": "#/components/schemas/LegalEntity.LegalEntitySMPInput"
                            }
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "parameters": []
        },
        "/order-responses": {
            "get": {
                "operationId": "getOrderResponseCollection",
                "tags": [
                    "OrderResponse"
                ],
                "responses": {
                    "200": {
                        "description": "OrderResponse collection",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "hydra:member": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OrderResponse.OrderResponseOutput.jsonld"
                                            }
                                        },
                                        "hydra:totalItems": {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        "hydra:view": {
                                            "type": "object",
                                            "properties": {
                                                "@id": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:first": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:last": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:previous": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:next": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                }
                                            }
                                        },
                                        "hydra:search": {
                                            "type": "object",
                                            "properties": {
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:template": {
                                                    "type": "string"
                                                },
                                                "hydra:variableRepresentation": {
                                                    "type": "string"
                                                },
                                                "hydra:mapping": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "@type": {
                                                                "type": "string"
                                                            },
                                                            "variable": {
                                                                "type": "string"
                                                            },
                                                            "property": {
                                                                "type": "string",
                                                                "nullable": true
                                                            },
                                                            "required": {
                                                                "type": "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "required": [
                                        "hydra:member"
                                    ]
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrderResponse.OrderResponseOutput"
                                    }
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrderResponse.OrderResponseOutput"
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Retrieves the collection of OrderResponse resources.",
                "description": "Retrieves the collection of OrderResponse resources.",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The collection page number",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of items per page",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "minimum": 0
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[strictly_before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[strictly_after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter document creation date, it is mandatory to provide the direction filter too."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "description": "Filter document by direction, chose between \"outgoing\" or \"incoming\"",
                            "enum": [
                                "outgoing",
                                "incoming"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[strictly_before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[strictly_after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentNumber",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter document by documentNumber, it is mandatory to provide a documentDate filter too. Filter by ~documentNumber to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter by senderName. Use ~senderName to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderName[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "senderId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderId[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter by recipientName. Use ~recipientName to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientName[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientId[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[createdAt]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[documentDate]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[senderName]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[recipientName]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/order-responses/incoming/ubl": {
            "post": {
                "operationId": "post_incoming_ublOrderResponseCollection",
                "tags": [
                    "OrderResponse"
                ],
                "responses": {
                    "201": {
                        "description": "OrderResponse resource created",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderResponse.OrderResponseOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderResponse.OrderResponseOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderResponse.OrderResponseOutput"
                                }
                            }
                        },
                        "links": {
                            "GetOrderResponseItem": {
                                "operationId": "getOrderResponseItem",
                                "parameters": {
                                    "uuid": "$response.body#/uuid"
                                },
                                "description": "The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /order-responses/{uuid}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                },
                "summary": "Import a new incoming order response in UBL format",
                "description": "Import a received UBL 2.1 order response in either the original XML format or the JSON transposition.\nYou must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).",
                "parameters": [],
                "requestBody": {
                    "description": "The new OrderResponse resource",
                    "content": {
                        "application/json": {
                            "schema": {}
                        },
                        "application/xml": {
                            "schema": {}
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "parameters": []
        },
        "/order-responses/outgoing/ubl": {
            "post": {
                "operationId": "post_outgoing_ublOrderResponseCollection",
                "tags": [
                    "OrderResponse"
                ],
                "responses": {
                    "201": {
                        "description": "OrderResponse resource created",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderResponse.OrderResponseOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderResponse.OrderResponseOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderResponse.OrderResponseOutput"
                                }
                            }
                        },
                        "links": {
                            "GetOrderResponseItem": {
                                "operationId": "getOrderResponseItem",
                                "parameters": {
                                    "uuid": "$response.body#/uuid"
                                },
                                "description": "The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /order-responses/{uuid}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                },
                "summary": "Create a new order response in UBL format",
                "description": "Send a UBL 2.1 order response in either the original XML format or the JSON transposition.\nYou must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).\n\nOptionally you can send the `X-Validation-Rule: {validation-rule-code}` where `{validation-rule-code}` is one of the available validation rules you can use.\nYou can retrieve a list of the available validation rules using the API `GET /validation-rules`.\nBy default the validation rule is autodetected using the latest rule available for the given document.\n",
                "parameters": [],
                "requestBody": {
                    "description": "The new OrderResponse resource",
                    "content": {
                        "application/json": {
                            "schema": {}
                        },
                        "application/xml": {
                            "schema": {}
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "parameters": []
        },
        "/order-responses/{uuid}": {
            "get": {
                "operationId": "getOrderResponseItem",
                "tags": [
                    "OrderResponse"
                ],
                "responses": {
                    "200": {
                        "description": "OrderResponse resource",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderResponse.OrderResponseOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderResponse.OrderResponseOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderResponse.OrderResponseOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Retrieves a OrderResponse resource.",
                "description": "Retrieves a OrderResponse resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/order-responses/{uuid}/source": {
            "get": {
                "operationId": "get_sourceOrderResponseItem",
                "tags": [
                    "OrderResponse"
                ],
                "responses": {
                    "200": {
                        "description": "OrderResponse resource",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderResponse.OrderResponseOutput"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderResponse.OrderResponseOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Get the original source document",
                "description": "Retrieves a OrderResponse resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/orders": {
            "get": {
                "operationId": "getOrderCollection",
                "tags": [
                    "Order"
                ],
                "responses": {
                    "200": {
                        "description": "Order collection",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "hydra:member": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Order.OrderOutput.jsonld"
                                            }
                                        },
                                        "hydra:totalItems": {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        "hydra:view": {
                                            "type": "object",
                                            "properties": {
                                                "@id": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:first": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:last": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:previous": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:next": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                }
                                            }
                                        },
                                        "hydra:search": {
                                            "type": "object",
                                            "properties": {
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:template": {
                                                    "type": "string"
                                                },
                                                "hydra:variableRepresentation": {
                                                    "type": "string"
                                                },
                                                "hydra:mapping": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "@type": {
                                                                "type": "string"
                                                            },
                                                            "variable": {
                                                                "type": "string"
                                                            },
                                                            "property": {
                                                                "type": "string",
                                                                "nullable": true
                                                            },
                                                            "required": {
                                                                "type": "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "required": [
                                        "hydra:member"
                                    ]
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Order.OrderOutput"
                                    }
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Order.OrderOutput"
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Retrieves the collection of Order resources.",
                "description": "Retrieves the collection of Order resources.",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The collection page number",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of items per page",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "minimum": 0
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[strictly_before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt[strictly_after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "createdAt",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter document creation date, it is mandatory to provide the direction filter too."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "description": "Filter document by direction, chose between \"outgoing\" or \"incoming\"",
                            "enum": [
                                "outgoing",
                                "incoming"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[strictly_before]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentDate[strictly_after]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "documentNumber",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter document by documentNumber, it is mandatory to provide a documentDate filter too. Filter by ~documentNumber to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter by senderName. Use ~senderName to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderName[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "senderId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "senderId[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "description": "Filter by recipientName. Use ~recipientName to get a partial match."
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientName[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "recipientId[]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[createdAt]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[documentDate]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[senderName]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "sortBy[recipientName]",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/orders/incoming/ubl": {
            "post": {
                "operationId": "post_incoming_ublOrderCollection",
                "tags": [
                    "Order"
                ],
                "responses": {
                    "201": {
                        "description": "Order resource created",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order.OrderOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order.OrderOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order.OrderOutput"
                                }
                            }
                        },
                        "links": {
                            "GetOrderItem": {
                                "operationId": "getOrderItem",
                                "parameters": {
                                    "uuid": "$response.body#/uuid"
                                },
                                "description": "The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /orders/{uuid}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                },
                "summary": "Import a new incoming order in UBL format",
                "description": "Import a received UBL 2.1 order in either the original XML format or the JSON transposition.\nYou must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).",
                "parameters": [],
                "requestBody": {
                    "description": "The new Order resource",
                    "content": {
                        "application/json": {
                            "schema": {}
                        },
                        "application/xml": {
                            "schema": {}
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "parameters": []
        },
        "/orders/outgoing/ubl": {
            "post": {
                "operationId": "post_outgoing_ublOrderCollection",
                "tags": [
                    "Order"
                ],
                "responses": {
                    "201": {
                        "description": "Order resource created",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order.OrderOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order.OrderOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order.OrderOutput"
                                }
                            }
                        },
                        "links": {
                            "GetOrderItem": {
                                "operationId": "getOrderItem",
                                "parameters": {
                                    "uuid": "$response.body#/uuid"
                                },
                                "description": "The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /orders/{uuid}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                },
                "summary": "Create a new order in UBL format",
                "description": "Send a UBL 2.1 order in either the original XML format or the JSON transposition.\nYou must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).\n\nOptionally you can send the `X-Validation-Rule: {validation-rule-code}` where `{validation-rule-code}` is one of the available validation rules you can use.\nYou can retrieve a list of the available validation rules using the API `GET /validation-rules`.\nBy default the validation rule is autodetected using the latest rule available for the given document.\n",
                "parameters": [],
                "requestBody": {
                    "description": "The new Order resource",
                    "content": {
                        "application/json": {
                            "schema": {}
                        },
                        "application/xml": {
                            "schema": {}
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "parameters": []
        },
        "/orders/{uuid}": {
            "get": {
                "operationId": "getOrderItem",
                "tags": [
                    "Order"
                ],
                "responses": {
                    "200": {
                        "description": "Order resource",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order.OrderOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order.OrderOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order.OrderOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Retrieves a Order resource.",
                "description": "Retrieves a Order resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/orders/{uuid}/source": {
            "get": {
                "operationId": "get_sourceOrderItem",
                "tags": [
                    "Order"
                ],
                "responses": {
                    "200": {
                        "description": "Order resource",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order.OrderOutput"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order.OrderOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Get the original source document",
                "description": "Retrieves a Order resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/processes": {
            "get": {
                "operationId": "getProcessCollection",
                "tags": [
                    "Process"
                ],
                "responses": {
                    "200": {
                        "description": "Process collection",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "hydra:member": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Process.ProcessOutput.jsonld"
                                            }
                                        },
                                        "hydra:totalItems": {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        "hydra:view": {
                                            "type": "object",
                                            "properties": {
                                                "@id": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:first": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:last": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:previous": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:next": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                }
                                            }
                                        },
                                        "hydra:search": {
                                            "type": "object",
                                            "properties": {
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:template": {
                                                    "type": "string"
                                                },
                                                "hydra:variableRepresentation": {
                                                    "type": "string"
                                                },
                                                "hydra:mapping": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "@type": {
                                                                "type": "string"
                                                            },
                                                            "variable": {
                                                                "type": "string"
                                                            },
                                                            "property": {
                                                                "type": "string",
                                                                "nullable": true
                                                            },
                                                            "required": {
                                                                "type": "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "required": [
                                        "hydra:member"
                                    ]
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Process.ProcessOutput"
                                    }
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Process.ProcessOutput"
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Retrieves the collection of Process resources.",
                "description": "Get the list of supported document types.\nFor a complete and official list see https://docs.peppol.eu/edelivery/codelists/",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The collection page number",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of items per page",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "minimum": 0
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        },
        "/validation-rules": {
            "get": {
                "operationId": "getValidationRuleCollection",
                "tags": [
                    "ValidationRule"
                ],
                "responses": {
                    "200": {
                        "description": "ValidationRule collection",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ValidationRule"
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Retrieves the collection of ValidationRule resources.",
                "description": "Retrieves the collection of ValidationRule resources.",
                "parameters": [],
                "deprecated": false
            },
            "parameters": []
        },
        "/webhooks": {
            "get": {
                "operationId": "getWebhookCollection",
                "tags": [
                    "Webhook"
                ],
                "responses": {
                    "200": {
                        "description": "Webhook collection",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "hydra:member": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Webhook.WebhookOutput.jsonld"
                                            }
                                        },
                                        "hydra:totalItems": {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        "hydra:view": {
                                            "type": "object",
                                            "properties": {
                                                "@id": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:first": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:last": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:previous": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                },
                                                "hydra:next": {
                                                    "type": "string",
                                                    "format": "iri-reference"
                                                }
                                            }
                                        },
                                        "hydra:search": {
                                            "type": "object",
                                            "properties": {
                                                "@type": {
                                                    "type": "string"
                                                },
                                                "hydra:template": {
                                                    "type": "string"
                                                },
                                                "hydra:variableRepresentation": {
                                                    "type": "string"
                                                },
                                                "hydra:mapping": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "@type": {
                                                                "type": "string"
                                                            },
                                                            "variable": {
                                                                "type": "string"
                                                            },
                                                            "property": {
                                                                "type": "string",
                                                                "nullable": true
                                                            },
                                                            "required": {
                                                                "type": "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "required": [
                                        "hydra:member"
                                    ]
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Webhook.WebhookOutput"
                                    }
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Webhook.WebhookOutput"
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Retrieves the collection of Webhook resources.",
                "description": "Retrieves the collection of Webhook resources.",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The collection page number",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of items per page",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "minimum": 0
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "post": {
                "operationId": "postWebhookCollection",
                "tags": [
                    "Webhook"
                ],
                "responses": {
                    "201": {
                        "description": "Webhook resource created",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Webhook.WebhookOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Webhook.WebhookOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/Webhook.WebhookOutput"
                                }
                            }
                        },
                        "links": {
                            "GetWebhookItem": {
                                "operationId": "getWebhookItem",
                                "parameters": {
                                    "uuid": "$response.body#/uuid"
                                },
                                "description": "The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /webhooks/{uuid}`."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                },
                "summary": "Creates a Webhook resource.",
                "description": "Creates a Webhook resource.",
                "parameters": [],
                "requestBody": {
                    "description": "The new Webhook resource",
                    "content": {
                        "application/ld+json": {
                            "schema": {
                                "$ref": "#/components/schemas/Webhook.WebhookInput.jsonld"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Webhook.WebhookInput"
                            }
                        },
                        "text/html": {
                            "schema": {
                                "$ref": "#/components/schemas/Webhook.WebhookInput"
                            }
                        }
                    },
                    "required": true
                },
                "deprecated": false
            },
            "parameters": []
        },
        "/webhooks/{uuid}": {
            "get": {
                "operationId": "getWebhookItem",
                "tags": [
                    "Webhook"
                ],
                "responses": {
                    "200": {
                        "description": "Webhook resource",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Webhook.WebhookOutput.jsonld"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Webhook.WebhookOutput"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/Webhook.WebhookOutput"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Retrieves a Webhook resource.",
                "description": "Retrieves a Webhook resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "delete": {
                "operationId": "deleteWebhookItem",
                "tags": [
                    "Webhook"
                ],
                "responses": {
                    "204": {
                        "description": "Webhook resource deleted"
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "summary": "Removes the Webhook resource.",
                "description": "Removes the Webhook resource.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "parameters": []
        }
    },
    "components": {
        "schemas": {
            "CreditNote.CreditNoteOutput": {
                "type": "object",
                "description": "",
                "properties": {
                    "uuid": {
                        "type": "string"
                    },
                    "direction": {
                        "enum": [
                            "outgoing",
                            "incoming"
                        ],
                        "type": "string"
                    },
                    "format": {
                        "enum": [
                            "UBL 2.1 XML",
                            "UBL 2.1 JSON"
                        ],
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "peppolMessage": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PeppolMessageOutput"
                            }
                        ]
                    }
                }
            },
            "CreditNote.CreditNoteOutput.jsonld": {
                "type": "object",
                "description": "",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "direction": {
                        "enum": [
                            "outgoing",
                            "incoming"
                        ],
                        "type": "string"
                    },
                    "format": {
                        "enum": [
                            "UBL 2.1 XML",
                            "UBL 2.1 JSON"
                        ],
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Participant.jsonld"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Participant.jsonld"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "peppolMessage": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PeppolMessageOutput.jsonld"
                            }
                        ]
                    }
                }
            },
            "CreditNote.PrintDocumentOutput": {
                "type": "object",
                "description": "",
                "properties": {
                    "url": {
                        "type": "string"
                    }
                }
            },
            "DespatchAdvice.DespatchAdviceOutput": {
                "type": "object",
                "description": "",
                "properties": {
                    "uuid": {
                        "type": "string"
                    },
                    "direction": {
                        "enum": [
                            "outgoing",
                            "incoming"
                        ],
                        "type": "string"
                    },
                    "format": {
                        "enum": [
                            "UBL 2.1 XML",
                            "UBL 2.1 JSON"
                        ],
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "peppolMessage": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PeppolMessageOutput"
                            }
                        ]
                    }
                }
            },
            "DespatchAdvice.DespatchAdviceOutput.jsonld": {
                "type": "object",
                "description": "",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "direction": {
                        "enum": [
                            "outgoing",
                            "incoming"
                        ],
                        "type": "string"
                    },
                    "format": {
                        "enum": [
                            "UBL 2.1 XML",
                            "UBL 2.1 JSON"
                        ],
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Participant.jsonld"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Participant.jsonld"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "peppolMessage": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PeppolMessageOutput.jsonld"
                            }
                        ]
                    }
                }
            },
            "DocumentType.DocumentTypeOutput": {
                "type": "object",
                "description": "",
                "properties": {
                    "scheme": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "since": {
                        "type": "string"
                    },
                    "deprecated": {
                        "type": "boolean"
                    },
                    "deprecatedSince": {
                        "type": "string",
                        "nullable": true
                    },
                    "issuedByOpenPeppol": {
                        "type": "boolean"
                    },
                    "bisVersion": {
                        "type": "string",
                        "nullable": true
                    },
                    "domainCommunity": {
                        "type": "string",
                        "nullable": true
                    },
                    "processes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "DocumentType.DocumentTypeOutput.jsonld": {
                "type": "object",
                "description": "",
                "properties": {
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "scheme": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "since": {
                        "type": "string"
                    },
                    "deprecated": {
                        "type": "boolean"
                    },
                    "deprecatedSince": {
                        "type": "string",
                        "nullable": true
                    },
                    "issuedByOpenPeppol": {
                        "type": "boolean"
                    },
                    "bisVersion": {
                        "type": "string",
                        "nullable": true
                    },
                    "domainCommunity": {
                        "type": "string",
                        "nullable": true
                    },
                    "processes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ITOrder.ITOrderOutput": {
                "type": "object",
                "description": "",
                "properties": {
                    "uuid": {
                        "type": "string"
                    },
                    "direction": {
                        "enum": [
                            "outgoing",
                            "incoming"
                        ],
                        "type": "string"
                    },
                    "format": {
                        "enum": [
                            "UBL 2.1 XML",
                            "UBL 2.1 JSON"
                        ],
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "peppolMessage": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PeppolMessageOutput"
                            }
                        ]
                    },
                    "processType": {
                        "enum": [
                            "order only",
                            "ordering",
                            "order agreement"
                        ],
                        "type": "string",
                        "nullable": true
                    },
                    "processInformation": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ITOrderProcessInformation"
                            }
                        ]
                    },
                    "responses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ITOrderResponseOutput"
                        }
                    }
                }
            },
            "ITOrder.ITOrderOutput.jsonld": {
                "type": "object",
                "description": "",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "direction": {
                        "enum": [
                            "outgoing",
                            "incoming"
                        ],
                        "type": "string"
                    },
                    "format": {
                        "enum": [
                            "UBL 2.1 XML",
                            "UBL 2.1 JSON"
                        ],
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Participant.jsonld"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Participant.jsonld"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "peppolMessage": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PeppolMessageOutput.jsonld"
                            }
                        ]
                    },
                    "processType": {
                        "enum": [
                            "order only",
                            "ordering",
                            "order agreement"
                        ],
                        "type": "string",
                        "nullable": true
                    },
                    "processInformation": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ITOrderProcessInformation.jsonld"
                            }
                        ]
                    },
                    "responses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ITOrderResponseOutput.jsonld"
                        }
                    }
                }
            },
            "ITOrder.PrintDocumentOutput": {
                "type": "object",
                "description": "",
                "properties": {
                    "url": {
                        "type": "string"
                    }
                }
            },
            "ITOrderACL.ITOrderACLInput": {
                "type": "object",
                "description": "",
                "properties": {
                    "documentUuid": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "integer"
                    },
                    "read": {
                        "type": "boolean",
                        "nullable": true
                    }
                }
            },
            "ITOrderACL.ITOrderACLInput.jsonld": {
                "type": "object",
                "description": "",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "documentUuid": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "integer"
                    },
                    "read": {
                        "type": "boolean",
                        "nullable": true
                    }
                }
            },
            "ITOrderACL.ITOrderACLOutput": {
                "type": "object",
                "description": "",
                "properties": {
                    "documentUuid": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "integer"
                    },
                    "read": {
                        "type": "boolean",
                        "nullable": true
                    }
                }
            },
            "ITOrderACL.ITOrderACLOutput.jsonld": {
                "type": "object",
                "description": "",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "documentUuid": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "integer"
                    },
                    "read": {
                        "type": "boolean",
                        "nullable": true
                    }
                }
            },
            "ITOrderOutput": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string"
                    },
                    "direction": {
                        "enum": [
                            "outgoing",
                            "incoming"
                        ],
                        "type": "string"
                    },
                    "format": {
                        "enum": [
                            "UBL 2.1 XML",
                            "UBL 2.1 JSON"
                        ],
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "peppolMessage": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PeppolMessageOutput"
                            }
                        ]
                    },
                    "processType": {
                        "enum": [
                            "order only",
                            "ordering",
                            "order agreement"
                        ],
                        "type": "string",
                        "nullable": true
                    },
                    "processInformation": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ITOrderProcessInformation"
                            }
                        ]
                    },
                    "responses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ITOrderResponseOutput"
                        }
                    }
                }
            },
            "ITOrderOutput.jsonld": {
                "type": "object",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "direction": {
                        "enum": [
                            "outgoing",
                            "incoming"
                        ],
                        "type": "string"
                    },
                    "format": {
                        "enum": [
                            "UBL 2.1 XML",
                            "UBL 2.1 JSON"
                        ],
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Participant.jsonld"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Participant.jsonld"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "peppolMessage": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PeppolMessageOutput.jsonld"
                            }
                        ]
                    },
                    "processType": {
                        "enum": [
                            "order only",
                            "ordering",
                            "order agreement"
                        ],
                        "type": "string",
                        "nullable": true
                    },
                    "processInformation": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ITOrderProcessInformation.jsonld"
                            }
                        ]
                    },
                    "responses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ITOrderResponseOutput.jsonld"
                        }
                    }
                }
            },
            "ITOrderProcessInformation": {
                "type": "object",
                "properties": {
                    "documentType": {
                        "enum": [
                            "initial",
                            "revocation",
                            "replacement",
                            "validation",
                            "connected",
                            "confirmation feedback",
                            "denial feedback",
                            "replacement feedback"
                        ],
                        "type": "string"
                    },
                    "orderStatus": {
                        "enum": [
                            "revised",
                            "cancelled",
                            "accepted by feedback order",
                            "cancelled by feedback order",
                            "revised by feedback order",
                            "received by response",
                            "accepted by response",
                            "rejected by response",
                            "accepted with updates by response"
                        ],
                        "type": "string",
                        "nullable": true
                    },
                    "documentReference": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ITOrderOutput"
                            }
                        ]
                    }
                }
            },
            "ITOrderProcessInformation.jsonld": {
                "type": "object",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "documentType": {
                        "enum": [
                            "initial",
                            "revocation",
                            "replacement",
                            "validation",
                            "connected",
                            "confirmation feedback",
                            "denial feedback",
                            "replacement feedback"
                        ],
                        "type": "string"
                    },
                    "orderStatus": {
                        "enum": [
                            "revised",
                            "cancelled",
                            "accepted by feedback order",
                            "cancelled by feedback order",
                            "revised by feedback order",
                            "received by response",
                            "accepted by response",
                            "rejected by response",
                            "accepted with updates by response"
                        ],
                        "type": "string",
                        "nullable": true
                    },
                    "documentReference": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ITOrderOutput.jsonld"
                            }
                        ]
                    }
                }
            },
            "ITOrderResponse.ITOrderResponseOutput": {
                "type": "object",
                "description": "",
                "properties": {
                    "uuid": {
                        "type": "string"
                    },
                    "direction": {
                        "enum": [
                            "outgoing",
                            "incoming"
                        ],
                        "type": "string"
                    },
                    "format": {
                        "enum": [
                            "UBL 2.1 XML",
                            "UBL 2.1 JSON"
                        ],
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "peppolMessage": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PeppolMessageOutput"
                            }
                        ]
                    },
                    "processType": {
                        "enum": [
                            "order only",
                            "ordering",
                            "order agreement"
                        ],
                        "type": "string",
                        "nullable": true
                    },
                    "processInformation": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ITOrderResponseProcessInformation"
                            }
                        ]
                    },
                    "order": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ITOrderOutput"
                            }
                        ]
                    }
                }
            },
            "ITOrderResponse.ITOrderResponseOutput.jsonld": {
                "type": "object",
                "description": "",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "direction": {
                        "enum": [
                            "outgoing",
                            "incoming"
                        ],
                        "type": "string"
                    },
                    "format": {
                        "enum": [
                            "UBL 2.1 XML",
                            "UBL 2.1 JSON"
                        ],
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Participant.jsonld"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Participant.jsonld"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "peppolMessage": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PeppolMessageOutput.jsonld"
                            }
                        ]
                    },
                    "processType": {
                        "enum": [
                            "order only",
                            "ordering",
                            "order agreement"
                        ],
                        "type": "string",
                        "nullable": true
                    },
                    "processInformation": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ITOrderResponseProcessInformation.jsonld"
                            }
                        ]
                    },
                    "order": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ITOrderOutput.jsonld"
                            }
                        ]
                    }
                }
            },
            "ITOrderResponse.PrintDocumentOutput": {
                "type": "object",
                "description": "",
                "properties": {
                    "url": {
                        "type": "string"
                    }
                }
            },
            "ITOrderResponseOutput": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string"
                    },
                    "direction": {
                        "enum": [
                            "outgoing",
                            "incoming"
                        ],
                        "type": "string"
                    },
                    "format": {
                        "enum": [
                            "UBL 2.1 XML",
                            "UBL 2.1 JSON"
                        ],
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "peppolMessage": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PeppolMessageOutput"
                            }
                        ]
                    },
                    "processType": {
                        "enum": [
                            "order only",
                            "ordering",
                            "order agreement"
                        ],
                        "type": "string",
                        "nullable": true
                    },
                    "processInformation": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ITOrderResponseProcessInformation"
                            }
                        ]
                    },
                    "order": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ITOrderOutput"
                            }
                        ]
                    }
                }
            },
            "ITOrderResponseOutput.jsonld": {
                "type": "object",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "direction": {
                        "enum": [
                            "outgoing",
                            "incoming"
                        ],
                        "type": "string"
                    },
                    "format": {
                        "enum": [
                            "UBL 2.1 XML",
                            "UBL 2.1 JSON"
                        ],
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Participant.jsonld"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Participant.jsonld"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "peppolMessage": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PeppolMessageOutput.jsonld"
                            }
                        ]
                    },
                    "processType": {
                        "enum": [
                            "order only",
                            "ordering",
                            "order agreement"
                        ],
                        "type": "string",
                        "nullable": true
                    },
                    "processInformation": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ITOrderResponseProcessInformation.jsonld"
                            }
                        ]
                    },
                    "order": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ITOrderOutput.jsonld"
                            }
                        ]
                    }
                }
            },
            "ITOrderResponseProcessInformation": {
                "type": "object",
                "properties": {
                    "documentType": {
                        "enum": [
                            "order received",
                            "order rejected",
                            "order accepted",
                            "order revised"
                        ],
                        "type": "string"
                    },
                    "responseCode": {
                        "enum": [
                            "AB",
                            "RE",
                            "AP",
                            "CA"
                        ],
                        "type": "string"
                    },
                    "orderResponseStatus": {
                        "enum": [
                            "accepted",
                            "revised",
                            "cancelled"
                        ],
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "ITOrderResponseProcessInformation.jsonld": {
                "type": "object",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "documentType": {
                        "enum": [
                            "order received",
                            "order rejected",
                            "order accepted",
                            "order revised"
                        ],
                        "type": "string"
                    },
                    "responseCode": {
                        "enum": [
                            "AB",
                            "RE",
                            "AP",
                            "CA"
                        ],
                        "type": "string"
                    },
                    "orderResponseStatus": {
                        "enum": [
                            "accepted",
                            "revised",
                            "cancelled"
                        ],
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "Invoice.InvoiceOutput": {
                "type": "object",
                "description": "",
                "properties": {
                    "uuid": {
                        "type": "string"
                    },
                    "direction": {
                        "enum": [
                            "outgoing",
                            "incoming"
                        ],
                        "type": "string"
                    },
                    "format": {
                        "enum": [
                            "UBL 2.1 XML",
                            "UBL 2.1 JSON"
                        ],
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "peppolMessage": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PeppolMessageOutput"
                            }
                        ]
                    }
                }
            },
            "Invoice.InvoiceOutput.jsonld": {
                "type": "object",
                "description": "",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "direction": {
                        "enum": [
                            "outgoing",
                            "incoming"
                        ],
                        "type": "string"
                    },
                    "format": {
                        "enum": [
                            "UBL 2.1 XML",
                            "UBL 2.1 JSON"
                        ],
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Participant.jsonld"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Participant.jsonld"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "peppolMessage": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PeppolMessageOutput.jsonld"
                            }
                        ]
                    }
                }
            },
            "Invoice.PrintDocumentOutput": {
                "type": "object",
                "description": "",
                "properties": {
                    "url": {
                        "type": "string"
                    }
                }
            },
            "LegalEntity": {
                "type": "object",
                "description": "",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "ownerId": {
                        "description": "Owner ID.",
                        "type": "integer"
                    },
                    "registeredName": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string",
                        "nullable": true
                    },
                    "address": {
                        "type": "string",
                        "nullable": true
                    },
                    "city": {
                        "type": "string",
                        "nullable": true
                    },
                    "stateOrProvince": {
                        "type": "string",
                        "nullable": true
                    },
                    "zipCode": {
                        "type": "string",
                        "nullable": true
                    },
                    "identifierScheme": {
                        "type": "string"
                    },
                    "identifierValue": {
                        "type": "string"
                    },
                    "smpEnabled": {
                        "type": "boolean"
                    },
                    "receivedDocumentNotificationEmails": {
                        "type": "string",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "readOnly": true,
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                }
            },
            "LegalEntity.LegalEntityInput": {
                "type": "object",
                "description": "",
                "properties": {
                    "registeredName": {
                        "description": "Name used to register the End User in the business registry of the jurisdiction where it is legally based.",
                        "type": "string"
                    },
                    "country": {
                        "minLength": 2,
                        "maxLength": 2,
                        "description": "Country code ISO 3166-1 alpha-2 codes",
                        "type": "string",
                        "nullable": true
                    },
                    "address": {
                        "description": "Legal entity address",
                        "type": "string",
                        "nullable": true
                    },
                    "city": {
                        "description": "Legal entity city",
                        "type": "string",
                        "nullable": true
                    },
                    "stateOrProvince": {
                        "description": "Legal entity state or province",
                        "type": "string",
                        "nullable": true
                    },
                    "zipCode": {
                        "description": "Legal entity zip code",
                        "type": "string",
                        "nullable": true
                    },
                    "identifierScheme": {
                        "description": "The participant identifier scheme",
                        "default": "iso6523-actorid-upis",
                        "example": "iso6523-actorid-upis",
                        "type": "string"
                    },
                    "identifierValue": {
                        "description": "The participant identifier built as per the OpenPeppol normative version of the code list",
                        "type": "string"
                    },
                    "receivedDocumentNotificationEmails": {
                        "description": "The list of email addresses where a notification is sent for each received document",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    }
                }
            },
            "LegalEntity.LegalEntityInput.jsonld": {
                "type": "object",
                "description": "",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "registeredName": {
                        "description": "Name used to register the End User in the business registry of the jurisdiction where it is legally based.",
                        "type": "string"
                    },
                    "country": {
                        "minLength": 2,
                        "maxLength": 2,
                        "description": "Country code ISO 3166-1 alpha-2 codes",
                        "type": "string",
                        "nullable": true
                    },
                    "address": {
                        "description": "Legal entity address",
                        "type": "string",
                        "nullable": true
                    },
                    "city": {
                        "description": "Legal entity city",
                        "type": "string",
                        "nullable": true
                    },
                    "stateOrProvince": {
                        "description": "Legal entity state or province",
                        "type": "string",
                        "nullable": true
                    },
                    "zipCode": {
                        "description": "Legal entity zip code",
                        "type": "string",
                        "nullable": true
                    },
                    "identifierScheme": {
                        "description": "The participant identifier scheme",
                        "default": "iso6523-actorid-upis",
                        "example": "iso6523-actorid-upis",
                        "type": "string"
                    },
                    "identifierValue": {
                        "description": "The participant identifier built as per the OpenPeppol normative version of the code list",
                        "type": "string"
                    },
                    "receivedDocumentNotificationEmails": {
                        "description": "The list of email addresses where a notification is sent for each received document",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    }
                }
            },
            "LegalEntity.LegalEntityOutput": {
                "type": "object",
                "description": "",
                "properties": {
                    "uuid": {
                        "type": "string"
                    },
                    "registeredName": {
                        "description": "Name used to register the End User in the business registry of the jurisdiction where it is legally based.",
                        "type": "string"
                    },
                    "country": {
                        "description": "Country code ISO 3166-1 alpha-2 codes",
                        "type": "string",
                        "nullable": true
                    },
                    "address": {
                        "description": "Legal entity address",
                        "type": "string",
                        "nullable": true
                    },
                    "city": {
                        "description": "Legal entity city",
                        "type": "string",
                        "nullable": true
                    },
                    "stateOrProvince": {
                        "description": "Legal entity state or province",
                        "type": "string",
                        "nullable": true
                    },
                    "zipCode": {
                        "description": "Legal entity zip code",
                        "type": "string",
                        "nullable": true
                    },
                    "identifierScheme": {
                        "description": "The participant identifier scheme.",
                        "default": "iso6523-actorid-upis",
                        "example": "iso6523-actorid-upis",
                        "type": "string"
                    },
                    "identifierValue": {
                        "description": "The participant identifier built as per the OpenPeppol normative version of the code list.",
                        "type": "string"
                    },
                    "receivedDocumentNotificationEmails": {
                        "description": "The list of email addresses where a notification is sent for each received document",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "smpEnabled": {
                        "description": "True when this legal entity has been correctly registered into the SMP service.",
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                }
            },
            "LegalEntity.LegalEntityOutput.jsonld": {
                "type": "object",
                "description": "",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "registeredName": {
                        "description": "Name used to register the End User in the business registry of the jurisdiction where it is legally based.",
                        "type": "string"
                    },
                    "country": {
                        "description": "Country code ISO 3166-1 alpha-2 codes",
                        "type": "string",
                        "nullable": true
                    },
                    "address": {
                        "description": "Legal entity address",
                        "type": "string",
                        "nullable": true
                    },
                    "city": {
                        "description": "Legal entity city",
                        "type": "string",
                        "nullable": true
                    },
                    "stateOrProvince": {
                        "description": "Legal entity state or province",
                        "type": "string",
                        "nullable": true
                    },
                    "zipCode": {
                        "description": "Legal entity zip code",
                        "type": "string",
                        "nullable": true
                    },
                    "identifierScheme": {
                        "description": "The participant identifier scheme.",
                        "default": "iso6523-actorid-upis",
                        "example": "iso6523-actorid-upis",
                        "type": "string"
                    },
                    "identifierValue": {
                        "description": "The participant identifier built as per the OpenPeppol normative version of the code list.",
                        "type": "string"
                    },
                    "receivedDocumentNotificationEmails": {
                        "description": "The list of email addresses where a notification is sent for each received document",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "smpEnabled": {
                        "description": "True when this legal entity has been correctly registered into the SMP service.",
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                }
            },
            "LegalEntity.LegalEntitySMPInput": {
                "type": "object",
                "description": "",
                "properties": {
                    "enabled": {
                        "description": "Setting enabled to true will write the record into the SMP, with false the record will be deleted from the SMP.",
                        "type": "boolean"
                    },
                    "capabilities": {
                        "description": "The list of documents and processes this legal entity can manage, stored into the SMP.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LegalEntitySMPCapabilityInput"
                        }
                    }
                }
            },
            "LegalEntity.LegalEntitySMPInput.jsonld": {
                "type": "object",
                "description": "",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Setting enabled to true will write the record into the SMP, with false the record will be deleted from the SMP.",
                        "type": "boolean"
                    },
                    "capabilities": {
                        "description": "The list of documents and processes this legal entity can manage, stored into the SMP.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LegalEntitySMPCapabilityInput.jsonld"
                        }
                    }
                }
            },
            "LegalEntity.LegalEntitySMPOutput": {
                "type": "object",
                "description": "",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "capabilities": {
                        "description": "The list of documents and processes this legal entity can manage, stored into the SMP.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LegalEntitySMPCapabilityOutput"
                        }
                    }
                }
            },
            "LegalEntity.LegalEntitySMPOutput.jsonld": {
                "type": "object",
                "description": "",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "capabilities": {
                        "description": "The list of documents and processes this legal entity can manage, stored into the SMP.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LegalEntitySMPCapabilityOutput.jsonld"
                        }
                    }
                }
            },
            "LegalEntity.jsonld": {
                "type": "object",
                "description": "",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "ownerId": {
                        "description": "Owner ID.",
                        "type": "integer"
                    },
                    "registeredName": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string",
                        "nullable": true
                    },
                    "address": {
                        "type": "string",
                        "nullable": true
                    },
                    "city": {
                        "type": "string",
                        "nullable": true
                    },
                    "stateOrProvince": {
                        "type": "string",
                        "nullable": true
                    },
                    "zipCode": {
                        "type": "string",
                        "nullable": true
                    },
                    "identifierScheme": {
                        "type": "string"
                    },
                    "identifierValue": {
                        "type": "string"
                    },
                    "smpEnabled": {
                        "type": "boolean"
                    },
                    "receivedDocumentNotificationEmails": {
                        "type": "string",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "readOnly": true,
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                }
            },
            "LegalEntitySMPCapabilityInput": {
                "type": "object",
                "required": [
                    "documentTypeScheme",
                    "documentType",
                    "processScheme",
                    "process"
                ],
                "properties": {
                    "documentTypeScheme": {
                        "description": "The document type scheme, see the [list of supported document types](#operation/getDocumentTypeCollection)",
                        "default": "busdox-docid-qns",
                        "example": "busdox-docid-qns",
                        "type": "string"
                    },
                    "documentType": {
                        "description": "The document type identifier, see the [list of supported document types](#operation/getDocumentTypeCollection)",
                        "type": "string"
                    },
                    "processScheme": {
                        "description": "The process scheme, see the [list of supported processes](#operation/getProcessCollection)",
                        "default": "cenbii-procid-ubl",
                        "example": "cenbii-procid-ubl",
                        "type": "string"
                    },
                    "process": {
                        "description": "The process identifier, see the [list of supported processes](#operation/getProcessCollection)",
                        "type": "string"
                    }
                }
            },
            "LegalEntitySMPCapabilityInput.jsonld": {
                "type": "object",
                "required": [
                    "documentTypeScheme",
                    "documentType",
                    "processScheme",
                    "process"
                ],
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "documentTypeScheme": {
                        "description": "The document type scheme, see the [list of supported document types](#operation/getDocumentTypeCollection)",
                        "default": "busdox-docid-qns",
                        "example": "busdox-docid-qns",
                        "type": "string"
                    },
                    "documentType": {
                        "description": "The document type identifier, see the [list of supported document types](#operation/getDocumentTypeCollection)",
                        "type": "string"
                    },
                    "processScheme": {
                        "description": "The process scheme, see the [list of supported processes](#operation/getProcessCollection)",
                        "default": "cenbii-procid-ubl",
                        "example": "cenbii-procid-ubl",
                        "type": "string"
                    },
                    "process": {
                        "description": "The process identifier, see the [list of supported processes](#operation/getProcessCollection)",
                        "type": "string"
                    }
                }
            },
            "LegalEntitySMPCapabilityOutput": {
                "type": "object",
                "properties": {
                    "documentTypeScheme": {
                        "description": "The document type scheme, see the [list of supported document types](#operation/getDocumentTypeCollection)",
                        "type": "string"
                    },
                    "documentType": {
                        "description": "The document type identifier, see the [list of supported document types](#operation/getDocumentTypeCollection)",
                        "type": "string"
                    },
                    "processScheme": {
                        "description": "The process scheme, see the [list of supported processes](#operation/getProcessCollection)",
                        "type": "string"
                    },
                    "process": {
                        "description": "The process identifier, see the [list of supported processes](#operation/getProcessCollection)",
                        "type": "string"
                    }
                }
            },
            "LegalEntitySMPCapabilityOutput.jsonld": {
                "type": "object",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "documentTypeScheme": {
                        "description": "The document type scheme, see the [list of supported document types](#operation/getDocumentTypeCollection)",
                        "type": "string"
                    },
                    "documentType": {
                        "description": "The document type identifier, see the [list of supported document types](#operation/getDocumentTypeCollection)",
                        "type": "string"
                    },
                    "processScheme": {
                        "description": "The process scheme, see the [list of supported processes](#operation/getProcessCollection)",
                        "type": "string"
                    },
                    "process": {
                        "description": "The process identifier, see the [list of supported processes](#operation/getProcessCollection)",
                        "type": "string"
                    }
                }
            },
            "Order.OrderOutput": {
                "type": "object",
                "description": "",
                "properties": {
                    "uuid": {
                        "type": "string"
                    },
                    "direction": {
                        "enum": [
                            "outgoing",
                            "incoming"
                        ],
                        "type": "string"
                    },
                    "format": {
                        "enum": [
                            "UBL 2.1 XML",
                            "UBL 2.1 JSON"
                        ],
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "peppolMessage": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PeppolMessageOutput"
                            }
                        ]
                    },
                    "processType": {
                        "enum": [
                            "order only",
                            "ordering",
                            "order agreement"
                        ],
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "Order.OrderOutput.jsonld": {
                "type": "object",
                "description": "",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "direction": {
                        "enum": [
                            "outgoing",
                            "incoming"
                        ],
                        "type": "string"
                    },
                    "format": {
                        "enum": [
                            "UBL 2.1 XML",
                            "UBL 2.1 JSON"
                        ],
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Participant.jsonld"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Participant.jsonld"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "peppolMessage": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PeppolMessageOutput.jsonld"
                            }
                        ]
                    },
                    "processType": {
                        "enum": [
                            "order only",
                            "ordering",
                            "order agreement"
                        ],
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "OrderResponse.OrderResponseOutput": {
                "type": "object",
                "description": "",
                "properties": {
                    "uuid": {
                        "type": "string"
                    },
                    "direction": {
                        "enum": [
                            "outgoing",
                            "incoming"
                        ],
                        "type": "string"
                    },
                    "format": {
                        "enum": [
                            "UBL 2.1 XML",
                            "UBL 2.1 JSON"
                        ],
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "peppolMessage": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PeppolMessageOutput"
                            }
                        ]
                    }
                }
            },
            "OrderResponse.OrderResponseOutput.jsonld": {
                "type": "object",
                "description": "",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "direction": {
                        "enum": [
                            "outgoing",
                            "incoming"
                        ],
                        "type": "string"
                    },
                    "format": {
                        "enum": [
                            "UBL 2.1 XML",
                            "UBL 2.1 JSON"
                        ],
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Participant.jsonld"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Participant.jsonld"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "peppolMessage": {
                        "nullable": true,
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PeppolMessageOutput.jsonld"
                            }
                        ]
                    }
                }
            },
            "Participant": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "identifier": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "Participant.jsonld": {
                "type": "object",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "identifier": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "PeppolMessageOutput": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "requestSentAt": {
                        "type": "string",
                        "nullable": true
                    },
                    "responseReceivedAt": {
                        "type": "string",
                        "nullable": true
                    },
                    "success": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "errorCode": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "PeppolMessageOutput.jsonld": {
                "type": "object",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "requestSentAt": {
                        "type": "string",
                        "nullable": true
                    },
                    "responseReceivedAt": {
                        "type": "string",
                        "nullable": true
                    },
                    "success": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "errorCode": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "Process.ProcessOutput": {
                "type": "object",
                "description": "",
                "properties": {
                    "scheme": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "deprecated": {
                        "type": "boolean"
                    }
                }
            },
            "Process.ProcessOutput.jsonld": {
                "type": "object",
                "description": "",
                "properties": {
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "scheme": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "deprecated": {
                        "type": "boolean"
                    }
                }
            },
            "ValidationRule": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    }
                }
            },
            "Webhook.WebhookInput": {
                "type": "object",
                "description": "",
                "required": [
                    "event",
                    "url"
                ],
                "properties": {
                    "event": {
                        "enum": [
                            "outgoing-document",
                            "incoming-document"
                        ],
                        "type": "string"
                    },
                    "url": {
                        "externalDocs": {
                            "url": "http://schema.org/url"
                        },
                        "type": "string"
                    }
                }
            },
            "Webhook.WebhookInput.jsonld": {
                "type": "object",
                "description": "",
                "required": [
                    "event",
                    "url"
                ],
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "event": {
                        "enum": [
                            "outgoing-document",
                            "incoming-document"
                        ],
                        "type": "string"
                    },
                    "url": {
                        "externalDocs": {
                            "url": "http://schema.org/url"
                        },
                        "type": "string"
                    }
                }
            },
            "Webhook.WebhookOutput": {
                "type": "object",
                "description": "",
                "properties": {
                    "uuid": {
                        "type": "string"
                    },
                    "event": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    }
                }
            },
            "Webhook.WebhookOutput.jsonld": {
                "type": "object",
                "description": "",
                "properties": {
                    "@context": {
                        "readOnly": true,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "@vocab": {
                                        "type": "string"
                                    },
                                    "hydra": {
                                        "type": "string",
                                        "enum": [
                                            "http://www.w3.org/ns/hydra/core#"
                                        ]
                                    }
                                },
                                "required": [
                                    "@vocab",
                                    "hydra"
                                ],
                                "additionalProperties": true
                            }
                        ]
                    },
                    "@id": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "@type": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "event": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    }
                }
            }
        },
        "responses": {},
        "parameters": {},
        "examples": {},
        "requestBodies": {},
        "headers": {},
        "securitySchemes": {
            "bearer": {
                "type": "apiKey",
                "description": "Value for the Authorization header parameter.",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "security": [
        {
            "bearer": []
        }
    ],
    "tags": [],
    "x-tagGroups": [
        {
            "name": "Invoicing",
            "tags": [
                "Invoice",
                "CreditNote"
            ]
        },
        {
            "name": "Ordering",
            "tags": [
                "Order",
                "OrderResponse",
                "DespatchAdvice"
            ]
        },
        {
            "name": "Platform",
            "tags": [
                "Webhook",
                "ValidationRule",
                "LegalEntity",
                "DocumentType",
                "Process"
            ]
        },
        {
            "name": "IT",
            "tags": [
                "ITOrder",
                "ITOrderResponse"
            ]
        }
    ]
}